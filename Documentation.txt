Please see http://code.google.com/p/ap-gen/wiki/Documentation

== Steps to build a plugin ==

 # Write a XML file with the plugin specifications (see the examples for more info).
 # Run ap-gen.py against the XML file.
   $ ap-gen$ ./ap-gen.py FILE.xml
 # Look for the built files at the 'plugins' directory.

 
== Examples ==

See the files at 'examples' directory. 
   examples/clam-example-plugin-def.xml
   examples/ladspa-example-plugin-def.xml
   examples/vst-example-plugin-def.xml


== How to add a new plugin standard generator? ==

Create a new class implementing this interface.
class IPluginGen:
        """ Addon plugin generator public interface """
        def make_all(self): raise Exception("This is an interface with no implementation")
        def make_sources(self): raise Exception("This is an interface with no implementation")
        def make_buildsystem(self):
                """" Makefile, SConscript files, etc """
                raise Exception("This is an interface with no implementation")
        def make_doc(self):
                """ README file, diagrams, doxygen output generation, etc """
                raise Exception("This is an interface with no implementation")
#interface IPluginGen
Put the class file at 'generators' directory.
Add the reference to the new plugin generator in the ap-gen.py file.


== Related info ==

  * Paper: "AP-Gen: Framework generador de esqueletos de plugins de audio a partir de abstracciones y templates" (spanish) http://audiores.uint8.com.ar/files/doc/slides/AP-Gen_%20Framework%20generador%20de%20esqueletos%20de%20plugins%20de%20audio%20a%20partir%20de%20abstracciones%20y%20templates.pdf
  * Slides: http://www.slideshare.net/hordiales/apgen-slides (spanish)
  * Blog post (spanish) http://audiores.uint8.com.ar/blog/es/2010/09/28/ap-gen-framework-generador-de-esqueletos-de-plugins-de-audio-a-partir-de-abstracciones-y-templates/